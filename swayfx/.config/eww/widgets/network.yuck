(defwidget network-stats []
    (box :orientation "horizontal"
         :class "network-stats"
         :space-evenly false
        (box :space-evenly false
            (box :class "icon-primary" "download_2")
            (box :class "label-small" "${round(EWW_NET.lo.NET_DOWN / 1000000, 2)}MB/s")
        )
        (box :space-evenly false
            (box :class "icon-tertiary" "upload_2")
            (box :class "label-small" "${round(EWW_NET.lo.NET_UP / 1000000, 2)}MB/s")
        )
    )
)

(defwidget network-ssids []
    (box :orientation "vertical"
        :space-evenly false
        :spacing "${round(8 * get_env("EWW_SCALE"), 0)}"
        (box :class "label-large"
            :halign "start"
            "Nearby ssids"
        )
        (scroll :hscroll false :vscroll true
            :class "network-scroll"
            :valign "start"
            (box
                :orientation "vertical"
                :space-evenly false
                (for ssid in wifi-ssids
                    ;(list-item :class "body-large" :text {ssid.connected ? "[A] ${ssid.name}" : "${ssid.name}"})
                    (list-item-normal :text {ssid.connected ? "[A] ${ssid.name}" : "${ssid.name}"})
                    ;(box :class "label-medium" "${ssid.name}")
                )
            )
        )
    )
)

(defwidget button-groups-wifi []
    (box :space-evenly false
         :spacing "${round(8 * get_env("EWW_SCALE"), 0)}"
         :halign "center"
         :hexpand false
        (button-groups-icon :icon wifi-killed-icon :onclick "${eww_scripts}/network.sh wifi-toggle &" :class { wifi-killed ? "enabled" : ""})
        (button-groups-icon :icon "system_update_alt" :onclick "")
    )
)

; one line of buttons
(defwidget button-groups-networks []
    (box :space-evenly false
         :spacing "${round(6 * get_env("EWW_SCALE"), 0)}"
         :halign "center"
         :hexpand false
        (button-groups-icon-text :icon "invert_colors" :text "Tor" :onclick "" :class { tor-enabled ? "enabled" : ""})
        (button-groups-icon-text :icon "wifi" :text "openwrt" :onclick "")
    )
)

; one line of buttons
(defwidget button-groups-multimedia []
    (box :space-evenly false
         :spacing "${round(8 * get_env("EWW_SCALE"), 0)}"
         :halign "center"
        (button-groups-icon :icon "videocam" :onclick "")
        (button-groups-icon :icon "${audio["muted-icon"]}" :onclick "${eww_scripts}/alsa-audio.sh toggle &" :class { audio["muted"] ? "" : "enabled"})
        (button-groups-icon :icon "mic_off" :onclick "")
    )
)

(defwidget music-volume []
    (slider-horizontal-m3
        :value "${audio["volume"]}"
        :max 100
        :icon "ï€Ÿ"
        :label "Volume"
        :onchange "${eww_scripts}/alsa-audio.sh set {} &"
    )
)

(defwidget last-events []
    (box :orientation "vertical"
         :space-evenly false
         :spacing "${round(16 * get_env("EWW_SCALE"), 0)}"
        (box :class "label-large"
            :halign "start"
            "Last events"
        )
        (scroll :hscroll false :vscroll true
                :class "last-events"
            (for event in events
                (list-with-icon :icon "${event.icon}"
                                :title "${event.title}"
                                :text "${event.msg}"
                                :time "${event.time}"
                                :action "${event.action}"
                )
            )
        )
    )
)

; all vars
(defpoll audio :interval "5m"
               :initial "{}"
               `~/.config/eww/scripts/alsa-audio.sh`
)
(defvar wifi-killed false)
(defvar wifi-killed-icon "airplanemode_inactive")
(defvar tor-enabled false)
(defvar wifi-on false)
(defvar wifi-ssids "[]")
(defvar events "[{\"icon\":\"pause\",\"title\":\"system\",\"msg\":\"updated\",\"time\":\"11:50\",\"action\":\"footclient\"},{\"icon\":\"play\",\"title\":\"music\",\"msg\":\"Playing MasterbootRecord\",\"time\":\"11:56\",\"action\":\"footclient\"}]")
